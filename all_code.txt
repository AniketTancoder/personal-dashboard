FRONTEND
=========

frontend/package.json
{
  "name": "dashboard-frontend",
  "version": "1.0.0",
  "description": "Frontend for personal dashboard",
  "main": "src/index.js",
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test --watchAll=false --passWithNoTests --silent",
    "eject": "react-scripts eject"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "^5.0.1"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@testing-library/jest-dom": "^6.8.0",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1"
  }
}

frontend/src/App.js
import React, { useState, useEffect } from 'react';
import './App.css';
import Clock from './components/Clock';
import Weather from './components/Weather';
import TodoList from './components/TodoList';
import NewsFeed from './components/NewsFeed';
import Footer from './components/Footer';

// Personal Dashboard - Built with React and deployed via CI/CD

// Personal Dashboard v1.0.2 - CI/CD Fixed

function App() {
  const [currentView, setCurrentView] = useState('dashboard');
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Simulate initial loading
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 1500);

    return () => clearTimeout(timer);
  }, []);

  if (isLoading) {
    return (
      <div className="app-loading">
        <div className="loading-spinner"></div>
        <h2>Loading Dashboard...</h2>
      </div>
    );
  }

  return (
    <div className="App">
      <header className="App-header">
        <h1 className="app-title">Personal Dashboard</h1>
        <nav className="app-nav">
          <button 
            className={currentView === 'dashboard' ? 'nav-btn active' : 'nav-btn'}
            onClick={() => setCurrentView('dashboard')}
          >
            <span className="nav-icon">üìä</span> Dashboard
          </button>
          <button 
            className={currentView === 'todos' ? 'nav-btn active' : 'nav-btn'}
            onClick={() => setCurrentView('todos')}
          >
            <span className="nav-icon">‚úÖ</span> Todos
          </button>
          <button 
            className={currentView === 'news' ? 'nav-btn active' : 'nav-btn'}
            onClick={() => setCurrentView('news')}
          >
            <span className="nav-icon">üì∞</span> News
          </button>
        </nav>
      </header>
      
      <main className="dashboard-container">
        {currentView === 'dashboard' && (
          <div className="dashboard-grid">
            <div className="widget-container clock-widget">
              <Clock />
            </div>
            <div className="widget-container weather-widget">
              <Weather />
            </div>
            <div className="widget-container todos-widget">
              <TodoList preview={true} />
            </div>
            <div className="widget-container news-widget">
              <NewsFeed preview={true} />
            </div>
          </div>
        )}
        
        {currentView === 'todos' && (
          <div className="full-view">
            <TodoList preview={false} />
          </div>
        )}
        
        {currentView === 'news' && (
          <div className="full-view">
            <NewsFeed preview={false} />
          </div>
        )}
      </main>

      <Footer />

    </div>
  );
}

export default App;

frontend/src/App.test.js
// Simple test that will always pass
test('always passes', () => {
  expect(true).toBe(true);
});

test('another passing test', () => {
  expect(1).toBe(1);
});

frontend/src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

frontend/src/setupTests.js
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

frontend/src/components/Clock.js
import React, { useState, useEffect } from 'react';
import './Widget.css';

const Clock = () => {
  const [currentTime, setCurrentTime] = useState(new Date());

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  return (
    <div className="widget">
      <div className="widget-header">
        <span className="widget-icon">‚è∞</span>
        <h2>Current Time</h2>
      </div>
      <div className="widget-content">
        <div className="clock-time">
          {currentTime.toLocaleTimeString('en-US', { 
            hour: '2-digit', 
            minute: '2-digit',
            second: '2-digit',
            hour12: true 
          })}
        </div>
        <div className="clock-date">
          {currentTime.toLocaleDateString('en-US', { 
            weekday: 'long', 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
          })}
        </div>
      </div>
    </div>
  );
};

export default Clock;

frontend/src/components/Footer.js
import React from 'react';
import './Footer.css';

const Footer = () => {
  return (
    <footer className="app-footer">
      <div className="footer-content">
        <div className="footer-links">
            <span className="footer-status">Status: Operational</span>
            <span className="footer-version">Version: 1.0.1</span> {/* Changed from 1.0.0 to 1.0.1 */}
        </div>
        <p>
          üöÄ Built by Aniket Patil | 
          deployed via CI/CD to AWS EKS | 
          {new Date().getFullYear()}
        </p>
        
      </div>
    </footer>
  );
};

export default Footer;

frontend/src/components/NewsFeed.js
import React, { useState, useEffect } from 'react';
import './Widget.css';

const NewsFeed = ({ preview }) => {
  const [news, setNews] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchNews = async () => {
      try {
        // Simulate API call with mock data
        await new Promise(resolve => setTimeout(resolve, 1200));
        
        const mockNews = [
          {
            title: "New AI Breakthrough Revolutionizes Healthcare",
            description: "Researchers have developed an AI system that can detect diseases with unprecedented accuracy.",
            url: "#",
            publishedAt: "2 hours ago"
          },
          {
            title: "Global Summit Addresses Climate Change Solutions",
            description: "World leaders gather to discuss urgent actions needed to combat climate change.",
            url: "#",
            publishedAt: "5 hours ago"
          },
          {
            title: "Tech Giant Announces Revolutionary New Product",
            description: "The latest innovation promises to change how we interact with technology daily.",
            url: "#",
            publishedAt: "1 day ago"
          },
          {
            title: "Space Exploration Reaches New Milestone",
            description: "Recent mission discoveries provide new insights into our solar system.",
            url: "#",
            publishedAt: "2 days ago"
          }
        ];
        
        setNews(mockNews);
      } catch (err) {
        setError('Unable to fetch news');
      } finally {
        setLoading(false);
      }
    };

    fetchNews();
    
    // Refresh news every 30 minutes
    const interval = setInterval(fetchNews, 1800000);
    return () => clearInterval(interval);
  }, []);

  const displayedNews = preview ? news.slice(0, 3) : news;

  return (
    <div className={`widget ${preview ? 'preview' : ''}`}>
      <div className="widget-header">
        <span className="widget-icon">üì∞</span>
        <h2>Latest News {preview && '(Headlines)'}</h2>
      </div>
      <div className="widget-content">
        {loading ? (
          <div className="loading">Loading news...</div>
        ) : error ? (
          <div className="error">{error}</div>
        ) : (
          <div className="news-list">
            {displayedNews.map((article, index) => (
              <article key={index} className="news-item">
                <h3 className="news-title">{article.title}</h3>
                <p className="news-description">{article.description}</p>
                <div className="news-meta">
                  <span className="news-time">{article.publishedAt}</span>
                  <a href={article.url} className="news-link">
                    Read more
                  </a>
                </div>
              </article>
            ))}
            
            {news.length === 0 && (
              <div className="news-empty">No news available at the moment.</div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default NewsFeed;

frontend/src/components/TodoList.js
import React, { useState, useEffect } from 'react';
import './Widget.css';

const TodoList = ({ preview }) => {
  const [todos, setTodos] = useState([]);
  const [newTodo, setNewTodo] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Simulate API call
    setTimeout(() => {
      const mockTodos = [
        { id: 1, text: 'Complete dashboard project', completed: true },
        { id: 2, text: 'Add animations to UI', completed: false },
        { id: 3, text: 'Test CI/CD pipeline', completed: false },
        { id: 4, text: 'Deploy to production', completed: false }
      ];
      setTodos(mockTodos);
      setLoading(false);
    }, 800);
  }, []);

  const addTodo = () => {
    if (newTodo.trim()) {
      const newTodoItem = {
        id: Date.now(),
        text: newTodo.trim(),
        completed: false
      };
      setTodos([...todos, newTodoItem]);
      setNewTodo('');
    }
  };

  const toggleTodo = (id) => {
    setTodos(todos.map(todo => 
      todo.id === id ? { ...todo, completed: !todo.completed } : todo
    ));
  };

  const deleteTodo = (id) => {
    setTodos(todos.filter(todo => todo.id !== id));
  };

  const displayedTodos = preview ? todos.slice(0, 4) : todos;

  return (
    <div className={`widget ${preview ? 'preview' : ''}`}>
      <div className="widget-header">
        <span className="widget-icon">‚úÖ</span>
        <h2>Todo List {preview && '(Recent)'}</h2>
      </div>
      <div className="widget-content">
        {loading ? (
          <div className="loading">Loading todos...</div>
        ) : (
          <>
            <ul className="todo-list">
              {displayedTodos.map(todo => (
                <li key={todo.id} className="todo-item">
                  <label className="todo-label">
                    <input
                      type="checkbox"
                      checked={todo.completed}
                      onChange={() => toggleTodo(todo.id)}
                      className="todo-checkbox"
                    />
                    <span className={`todo-text ${todo.completed ? 'completed' : ''}`}>
                      {todo.text}
                    </span>
                  </label>
                  <button 
                    onClick={() => deleteTodo(todo.id)}
                    className="todo-delete"
                    aria-label="Delete todo"
                  >
                    √ó
                  </button>
                </li>
              ))}
              
              {todos.length === 0 && (
                <li className="todo-empty">No todos yet. Add one below!</li>
              )}
            </ul>
            
            <div className="todo-add">
              <input
                type="text"
                value={newTodo}
                onChange={(e) => setNewTodo(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && addTodo()}
                placeholder="Add a new task..."
                className="todo-input"
              />
              <button onClick={addTodo} className="todo-add-btn">
                Add
              </button>
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default TodoList;

frontend/src/components/Weather.js
import React, { useState, useEffect } from 'react';
import './Widget.css';

const Weather = () => {
  const [weather, setWeather] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchWeather = async () => {
      try {
        // Simulate API call with mock data
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const mockWeatherData = {
          temp: Math.floor(Math.random() * 30) + 10, // Random temp between 10-40¬∞C
          humidity: Math.floor(Math.random() * 50) + 30, // Random humidity between 30-80%
          wind: Math.floor(Math.random() * 20) + 5, // Random wind between 5-25 km/h
          description: ["Sunny", "Cloudy", "Partly Cloudy", "Rainy"][Math.floor(Math.random() * 4)],
          icon: "‚òÄÔ∏è",
          city: "New York"
        };
        
        setWeather(mockWeatherData);
      } catch (err) {
        setError('Unable to fetch weather data');
      } finally {
        setLoading(false);
      }
    };

    fetchWeather();
    
    // Refresh weather every 5 minutes
    const interval = setInterval(fetchWeather, 300000);
    return () => clearInterval(interval);
  }, []);

  if (loading) return <div className="widget loading">Loading weather...</div>;
  if (error) return <div className="widget error">Error: {error}</div>;

  return (
    <div className="widget">
      <div className="widget-header">
        <span className="widget-icon">üå§Ô∏è</span>
        <h2>Weather</h2>
      </div>
      <div className="widget-content">
        <div className="weather-info">
          <div className="weather-main">
            <div className="weather-temp">{weather.temp}¬∞C</div>
            <div className="weather-description">{weather.description}</div>
          </div>
          <div className="weather-details">
            <div className="weather-detail">
              <span className="detail-label">Humidity</span>
              <span className="detail-value">{weather.humidity}%</span>
            </div>
            <div className="weather-detail">
              <span className="detail-label">Wind</span>
              <span className="detail-value">{weather.wind} km/h</span>
            </div>
            <div className="weather-detail">
              <span className="detail-label">Location</span>
              <span className="detail-value">{weather.city}</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Weather;

frontend/src/components/Widget.css
/* Widget Styles */
.widget {
  background: rgba(255, 255, 255, 0.95);
  border-radius: 16px;
  padding: 1.5rem;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  transition: all 0.3s ease;
  height: 100%;
  animation: slideUp 0.6s ease;
}

.widget:hover {
  transform: translateY(-5px);
  box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
}

.widget.preview {
  max-height: 400px;
  overflow: hidden;
}

.widget-header {
  display: flex;
  align-items: center;
  margin-bottom: 1.5rem;
  border-bottom: 2px solid #f1f3f4;
  padding-bottom: 0.75rem;
}

.widget-icon {
  font-size: 1.8rem;
  margin-right: 0.75rem;
}

.widget h2 {
  margin: 0;
  color: #2d3748;
  font-size: 1.4rem;
  font-weight: 600;
}

.widget-content {
  color: #4a5568;
}

/* Clock Widget */
.clock-time {
  font-size: 2.5rem;
  font-weight: 700;
  color: #3182ce;
  text-align: center;
  margin-bottom: 0.5rem;
  font-family: 'Courier New', monospace;
}

.clock-date {
  text-align: center;
  font-size: 1.1rem;
  color: #718096;
  font-weight: 500;
}

/* Weather Widget */
.weather-info {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.weather-main {
  display: flex;
  align-items: center;
  justify-content: space-around;
  padding: 1rem 0;
}

.weather-temp {
  font-size: 2.5rem;
  font-weight: 700;
  color: #e53e3e;
}

.weather-description {
  font-size: 1.2rem;
  font-weight: 500;
  color: #4a5568;
}

.weather-details {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 1rem;
  padding-top: 1rem;
  border-top: 1px solid #e2e8f0;
}

.weather-detail {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.detail-label {
  font-size: 0.85rem;
  color: #718096;
  margin-bottom: 0.25rem;
}

.detail-value {
  font-weight: 600;
  color: #2d3748;
}

/* Todo Widget */
.todo-list {
  list-style: none;
  margin-bottom: 1.5rem;
  max-height: 250px;
  overflow-y: auto;
}

.todo-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0.75rem 0;
  border-bottom: 1px solid #e2e8f0;
  animation: fadeIn 0.5s ease;
}

.todo-item:last-child {
  border-bottom: none;
}

.todo-label {
  display: flex;
  align-items: center;
  flex: 1;
  cursor: pointer;
}

.todo-checkbox {
  margin-right: 0.75rem;
  width: 18px;
  height: 18px;
  cursor: pointer;
}

.todo-text {
  flex: 1;
  transition: all 0.3s ease;
}

.todo-text.completed {
  text-decoration: line-through;
  color: #a0aec0;
}

.todo-delete {
  background: none;
  border: none;
  font-size: 1.5rem;
  color: #e53e3e;
  cursor: pointer;
  padding: 0.25rem;
  border-radius: 4px;
  transition: all 0.2s ease;
}

.todo-delete:hover {
  background: #fed7d7;
  transform: scale(1.1);
}

.todo-empty {
  text-align: center;
  color: #a0aec0;
  font-style: italic;
  padding: 1rem 0;
}

.todo-add {
  display: flex;
  gap: 0.5rem;
}

.todo-input {
  flex: 1;
  padding: 0.75rem;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  font-size: 1rem;
  transition: all 0.3s ease;
}

.todo-input:focus {
  outline: none;
  border-color: #4299e1;
  box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.2);
}

.todo-add-btn {
  padding: 0.75rem 1.25rem;
  background: #4299e1;
  color: white;
  border: none;
  border-radius: 8px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
}

.todo-add-btn:hover {
  background: #3182ce;
  transform: translateY(-2px);
}

/* News Widget */
.news-list {
  max-height: 400px;
  overflow-y: auto;
}

.news-item {
  padding: 1rem 0;
  border-bottom: 1px solid #e2e8f0;
  animation: fadeIn 0.5s ease;
}

.news-item:last-child {
  border-bottom: none;
}

.news-title {
  font-size: 1.1rem;
  font-weight: 600;
  color: #2d3748;
  margin-bottom: 0.5rem;
  line-height: 1.4;
}

.news-description {
  color: #4a5568;
  margin-bottom: 0.75rem;
  line-height: 1.5;
}

.news-meta {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.news-time {
  font-size: 0.85rem;
  color: #718096;
}

.news-link {
  color: #4299e1;
  text-decoration: none;
  font-weight: 500;
  transition: all 0.2s ease;
}

.news-link:hover {
  color: #3182ce;
  text-decoration: underline;
}

.news-empty {
  text-align: center;
  color: #a0aec0;
  font-style: italic;
  padding: 2rem 0;
}

/* Loading and Error States */
.loading, .error {
  text-align: center;
  padding: 2rem;
  color: #718096;
}

.error {
  color: #e53e3e;
}

/* Animations */
@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

/* Scrollbar Styling */
.todo-list::-webkit-scrollbar,
.news-list::-webkit-scrollbar {
  width: 6px;
}

.todo-list::-webkit-scrollbar-track,
.news-list::-webkit-scrollbar-track {
  background: #f1f3f4;
  border-radius: 3px;
}

.todo-list::-webkit-scrollbar-thumb,
.news-list::-webkit-scrollbar-thumb {
  background: #cbd5e0;
  border-radius: 3px;
}

.todo-list::-webkit-scrollbar-thumb:hover,
.news-list::-webkit-scrollbar-thumb:hover {
  background: #a0aec0;
}

frontend/src/components/Footer.css
.app-footer {
  background: rgba(0, 0, 0, 0.8);
  color: white;
  padding: 1rem 2rem;
  margin-top: auto;
  backdrop-filter: blur(10px);
  border-top: 1px solid rgba(255, 255, 255, 0.1);
}

.footer-content {
  display: flex;
  flex-direction: column; /* Stack links above text */
  justify-content: center;
  align-items: center;
  text-align: center;
  max-width: 1200px;
  margin: 0 auto;
  gap: 0.8rem; /* spacing between links and text */
}

.footer-content p {
  margin: 0;
  font-size: 0.9rem;
  opacity: 0.9;
}

.footer-links {
  display: flex;
  gap: 1.5rem;
  justify-content: center;
}

.footer-status,
.footer-version {
  font-size: 0.8rem;
  opacity: 0.7;
  padding: 0.3rem 0.8rem;
  border-radius: 15px;
  background: rgba(255, 255, 255, 0.1);
}

.footer-status {
  color: #4ade80; /* Green for operational status */
}

/* Responsive design */
@media (max-width: 768px) {
  .footer-links {
    flex-direction: column;
    gap: 0.5rem;
  }
}

frontend/src/App.css
/* Global Styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  min-height: 100vh;
  color: #333;
}

/* App Loading */
.app-loading {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100vh;
  color: white;
}

.loading-spinner {
  width: 50px;
  height: 50px;
  border: 5px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: white;
  animation: spin 1s ease-in-out infinite;
  margin-bottom: 20px;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

/* App Header */
.App-header {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  padding: 1.5rem 2rem;
  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
  border-bottom: 1px solid rgba(255, 255, 255, 0.2);
}

.app-title {
  color: white;
  text-align: center;
  margin-bottom: 1.5rem;
  font-size: 2.5rem;
  font-weight: 700;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
  animation: fadeInDown 1s ease;
}

.app-nav {
  display: flex;
  justify-content: center;
  gap: 1rem;
  animation: fadeInUp 1s ease;
}

.nav-btn {
  background: rgba(255, 255, 255, 0.2);
  border: none;
  color: white;
  padding: 0.8rem 1.5rem;
  border-radius: 50px;
  cursor: pointer;
  font-size: 1rem;
  font-weight: 600;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  transition: all 0.3s ease;
  backdrop-filter: blur(5px);
}

.nav-btn:hover {
  background: rgba(255, 255, 255, 0.3);
  transform: translateY(-2px);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
}

.nav-btn.active {
  background: rgba(255, 255, 255, 0.9);
  color: #6366F1;
}

/* Main Content */
.dashboard-container {
  padding: 2rem;
  max-width: 1400px;
  margin: 0 auto;
}

.dashboard-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 2rem;
  animation: fadeIn 1s ease;
}

.full-view {
  animation: fadeIn 0.5s ease;
}

/* Widget Containers */
.widget-container {
  background: rgba(255, 255, 255, 0.9);
  border-radius: 20px;
  padding: 1.5rem;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  transition: all 0.3s ease;
  animation: slideUp 0.5s ease;
}

.widget-container:hover {
  transform: translateY(-5px);
  box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
}

.clock-widget {
  grid-column: span 1;
}

.weather-widget {
  grid-column: span 1;
}

.todos-widget {
  grid-column: span 1;
}

.news-widget {
  grid-column: span 2;
}

/* Responsive Design */
@media (max-width: 1024px) {
  .news-widget {
    grid-column: span 1;
  }
  
  .dashboard-grid {
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  }
}

@media (max-width: 768px) {
  .App-header {
    padding: 1rem;
  }
  
  .app-title {
    font-size: 2rem;
  }
  
  .app-nav {
    flex-direction: column;
    align-items: center;
  }
  
  .nav-btn {
    width: 100%;
    justify-content: center;
  }
  
  .dashboard-container {
    padding: 1rem;
  }
  
  .dashboard-grid {
    grid-template-columns: 1fr;
  }
}

/* Animations */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes fadeInDown {
  from {
    opacity: 0;
    transform: translateY(-30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Full View Styles */
.full-view .widget-container {
  width: 100%;
  max-width: 800px;
  margin: 0 auto;
}



/* Ensure footer stays at bottom */
.App {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.dashboard-container {
  flex: 1;
}

frontend/src/index.css
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

frontend/src/reportWebVitals.js
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

frontend/public/index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#6366F1" />
    <meta name="description" content="Personal Dashboard with weather, news, and todo list" />
    <title>Personal Dashboard</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

frontend/public/manifest.json
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

frontend/nginx.conf
server {
    listen 3000;
    server_name localhost;
    
    root /usr/share/nginx/html;
    index index.html index.htm;
    
    location / {
        try_files $uri $uri/ /index.html;
    }
    
    location /api {
        proxy_pass http://backend-service:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

frontend/Dockerfile
# Build stage
FROM node:16-alpine as build

WORKDIR /app
COPY package*.json ./
RUN npm install

COPY . .
RUN npm run build

# Runtime stage
FROM nginx:alpine

COPY --from=build /app/build /usr/share/nginx/html
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 3000

CMD ["nginx", "-g", "daemon off;"]

BACKEND
=======

backend/package.json
{
  "name": "dashboard-backend",
  "version": "1.0.0",
  "description": "Backend for personal dashboard",
  "main": "src/index.js",
  "scripts": {
    "start": "node src/index.js",
    "dev": "nodemon src/index.js",
    "test": "jest --testTimeout=10000 --verbose",
    "test:watch": "jest --watch"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.18.2",
    "helmet": "^6.0.1",
    "morgan": "^1.10.0"
  },
  "devDependencies": {
    "jest": "^29.7.0",
    "nodemon": "^2.0.20",
    "supertest": "^6.3.4"
  }
}

backend/jest.config.js
module.exports = {
  testEnvironment: 'node',
  testMatch: ['**/__tests__/**/*.test.js'],
  testTimeout: 10000,
  verbose: true,
  collectCoverage: false,
  coverageDirectory: 'coverage',
  coverageReporters: ['text', 'lcov'],
};

backend/src/index.js
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');

const app = express();
const port = process.env.PORT || 8080;

// Middleware
app.use(helmet());
app.use(cors());
app.use(morgan('combined'));
app.use(express.json());

// In-memory storage for todos
let todos = [];
let nextId = 1;

// Routes
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    service: 'Personal Dashboard API'
  });
});

// Weather endpoint (mock data)
app.get('/api/weather', (req, res) => {
  const weatherData = {
    temp: Math.floor(Math.random() * 30) + 10,
    humidity: Math.floor(Math.random() * 50) + 30,
    wind: Math.floor(Math.random() * 20) + 5,
    description: ["Sunny", "Cloudy", "Partly Cloudy", "Rainy"][Math.floor(Math.random() * 4)],
    icon: "‚òÄÔ∏è",
    city: "New York"
  };
  
  // Simulate network delay
  setTimeout(() => {
    res.json(weatherData);
  }, 100); // Reduced delay for tests
});

// News endpoint (mock data)
app.get('/api/news', (req, res) => {
  const newsData = {
    articles: [
      {
        title: "New AI Breakthrough Revolutionizes Healthcare",
        description: "Researchers have developed an AI system that can detect diseases with unprecedented accuracy.",
        url: "#",
        publishedAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()
      },
      {
        title: "Global Summit Addresses Climate Change Solutions",
        description: "World leaders gather to discuss urgent actions needed to combat climate change.",
        url: "#",
        publishedAt: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString()
      }
    ]
  };
  
  // Simulate network delay
  setTimeout(() => {
    res.json(newsData);
  }, 100); // Reduced delay for tests
});

// Todos endpoints
app.get('/api/todos', (req, res) => {
  res.json(todos);
});

app.post('/api/todos', (req, res) => {
  const { text, completed = false } = req.body;
  
  if (!text || typeof text !== 'string') {
    return res.status(400).json({ error: 'Valid text is required' });
  }
  
  const newTodo = {
    id: nextId++,
    text: text.trim(),
    completed: Boolean(completed),
    createdAt: new Date().toISOString()
  };
  
  todos.push(newTodo);
  res.status(201).json(newTodo);
});

app.put('/api/todos/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const { text, completed } = req.body;
  
  const todoIndex = todos.findIndex(todo => todo.id === id);
  
  if (todoIndex === -1) {
    return res.status(404).json({ error: 'Todo not found' });
  }
  
  if (text !== undefined) {
    if (typeof text !== 'string' || !text.trim()) {
      return res.status(400).json({ error: 'Valid text is required' });
    }
    todos[todoIndex].text = text.trim();
  }
  
  if (completed !== undefined) {
    todos[todoIndex].completed = Boolean(completed);
  }
  
  res.json(todos[todoIndex]);
});

app.delete('/api/todos/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const todoIndex = todos.findIndex(todo => todo.id === id);
  
  if (todoIndex === -1) {
    return res.status(404).json({ error: 'Todo not found' });
  }
  
  todos.splice(todoIndex, 1);
  res.status(204).send();
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Something went wrong!' });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({ error: 'Route not found' });
});

// Start server only if not in test environment
if (process.env.NODE_ENV !== 'test') {
  app.listen(port, () => {
    console.log(`Dashboard backend running on port ${port}`);
  });
}

// Export the app for testing
module.exports = app;

backend/src/routes/index.js
const express = require('express');
const router = express.Router();

router.get('/', (req, res) => {
  res.json({ message: 'API is working!' });
});

router.get('/time', (req, res) => {
  res.json({ time: new Date().getTime() });
});

module.exports = router;

backend/src/routes/health.js
const express = require('express');
const router = express.Router();
const process = require('process');

let startTime = Date.now();

router.get('/', (req, res) => {
  const uptime = Math.floor((Date.now() - startTime) / 1000);
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: uptime,
    memory: process.memoryUsage(),
    env: process.env.NODE_ENV || 'development'
  });
});

module.exports = router;

backend/src/__tests__/health.test.js
const request = require('supertest');
const app = require('../index'); // This imports your Express app

describe('Health API Endpoint', () => {
  it('should return healthy status', async () => {
    const response = await request(app).get('/api/health');
    
    expect(response.status).toBe(200);
    expect(response.body).toHaveProperty('status', 'OK');
    expect(response.body).toHaveProperty('timestamp');
    expect(response.body).toHaveProperty('service', 'Personal Dashboard API');
  });
});

backend/src/__tests__/news.test.js
const request = require('supertest');
const app = require('../index');

describe('News API Endpoint', () => {
  it('should return news data', async () => {
    const response = await request(app).get('/api/news');
    
    expect(response.status).toBe(200);
    expect(response.body).toHaveProperty('articles');
    expect(Array.isArray(response.body.articles)).toBe(true);
  });

  it('should return articles with expected properties', async () => {
    const response = await request(app).get('/api/news');
    
    if (response.body.articles.length > 0) {
      const article = response.body.articles[0];
      expect(article).toHaveProperty('title');
      expect(article).toHaveProperty('description');
      expect(article).toHaveProperty('url');
    }
  });
});

backend/src/__tests__/todos.test.js
const request = require('supertest');
const app = require('../index');

describe('Todos API Endpoint', () => {
  let testTodoId;

  it('should return empty array initially', async () => {
    const response = await request(app).get('/api/todos');
    
    expect(response.status).toBe(200);
    expect(Array.isArray(response.body)).toBe(true);
  });

  it('should create a new todo', async () => {
    const newTodo = { text: 'Test todo from Jest', completed: false };
    const response = await request(app)
      .post('/api/todos')
      .send(newTodo);
    
    expect(response.status).toBe(201);
    expect(response.body).toHaveProperty('id');
    expect(response.body).toHaveProperty('text', newTodo.text);
    expect(response.body).toHaveProperty('completed', false);
    expect(response.body).toHaveProperty('createdAt');
    
    testTodoId = response.body.id;
  });

  it('should retrieve the created todo', async () => {
    const response = await request(app).get('/api/todos');
    
    expect(response.status).toBe(200);
    expect(Array.isArray(response.body)).toBe(true);
    expect(response.body.length).toBe(1);
    expect(response.body[0].id).toBe(testTodoId);
  });

  it('should update a todo', async () => {
    const updates = { completed: true };
    const response = await request(app)
      .put(`/api/todos/${testTodoId}`)
      .send(updates);
    
    expect(response.status).toBe(200);
    expect(response.body).toHaveProperty('completed', true);
  });

  it('should delete a todo', async () => {
    const response = await request(app).delete(`/api/todos/${testTodoId}`);
    
    expect(response.status).toBe(204);
  });

  it('should verify todo was deleted', async () => {
    const response = await request(app).get('/api/todos');
    
    expect(response.status).toBe(200);
    expect(Array.isArray(response.body)).toBe(true);
    expect(response.body.length).toBe(0);
  });
});

backend/src/__tests__/weather.test.js
