name: Dashboard Backend CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: personal-dashboard-backend
  K8S_NAMESPACE: personal-dashboard

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'  # Change from '16' to '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci
      working-directory: ./backend

    - name: Run tests
      run: npm test
      working-directory: ./backend

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend
        # Build with both commit SHA and latest tags
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push both tags
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update Kubernetes deployment
      run: |
        # Configure kubectl
        aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
        
        # Replace placeholders in deployment file
        sed -i "s|<AWS_ACCOUNT_ID>|${{ secrets.AWS_ACCOUNT_ID }}|g" k8s/backend-deployment.yaml
        sed -i "s|<REGION>|${{ env.AWS_REGION }}|g" k8s/backend-deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml || echo "Namespace may already exist"
        kubectl apply -f k8s/backend-deployment.yaml
        
        # Wait for rollout to complete
        kubectl rollout status deployment/dashboard-backend -n ${{ env.K8S_NAMESPACE }} --timeout=300s

    - name: Run smoke test
      run: |
        # Wait for pods to be ready
        echo "Waiting for pods to be ready..."
        kubectl wait --for=condition=ready pod -l app=dashboard-backend -n ${{ env.K8S_NAMESPACE }} --timeout=180s
        
        # Check if services are available
        echo "Checking if backend service is available..."
        kubectl get svc -n ${{ env.K8S_NAMESPACE }} backend-service
        
        # Use port-forward to test the service
        echo "Testing API health endpoint..."
        kubectl port-forward -n ${{ env.K8S_NAMESPACE }} svc/backend-service 8080:8080 > /dev/null 2>&1 &
        PORT_FORWARD_PID=$!
        
        # Wait for port-forward to be established
        sleep 10
        
        # Test the health endpoint
        if curl -f http://localhost:8080/api/health; then
            echo "✅ Smoke test passed!"
            kill $PORT_FORWARD_PID
        else
            echo "❌ Smoke test failed!"
            kill $PORT_FORWARD_PID
            exit 1
        fi
        
        # Additional check: verify pods are running
        echo "Verifying pod status..."
        kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=dashboard-backend
        
        # Check pod logs for errors
        echo "Checking pod logs..."
        kubectl logs -n ${{ env.K8S_NAMESPACE }} -l app=dashboard-backend --tail=10
        echo "Smoke test passed successfully!"